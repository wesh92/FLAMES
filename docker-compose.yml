# docker-compose.yml

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - /app/.venv/
    environment:
      - PYTHONPATH=/app
      - UV_COMPILE_BYTECODE=1
      - UV_LINK_MODE=copy
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - MONGODB_URL=mongodb://mongo:27017/
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 90s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  db:
    image: postgres:17-bookworm
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    restart: unless-stopped

  mongo:
    image: mongo:8.0.4-noble
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\")'"]
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

networks:
  default:
    name: api-network
    driver: bridge

volumes:
  app-data:
    driver: local
  postgres-data:
    driver: local
  mongo-data:
    driver: local
# You can add more services here as needed, for example:
#
#  db:
#    image: sqlite:latest
#    volumes:
#      - app-data:/var/lib/sqlite
#    networks:
#      - api-network
#
#  redis:
#    image: redis:alpine
#    networks:
#      - api-network